import logging
import os
from aiogram import Bot, Dispatcher, executor, types

# –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º–æ –∑ ENV –∑–º—ñ–Ω–Ω–æ—ó BOT_TOKEN
API_TOKEN = os.getenv("BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π –π–æ–≥–æ –≤ Railway Variables.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–∏–π "—Ä–µ—î—Å—Ç—Ä –∑–∞—è–≤–æ–∫"
orders = {}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("üëã –í—ñ—Ç–∞—î–º–æ —É —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ!\n"
                        "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è, —â–æ–± –º–∏ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞—è–≤–∫—É.")

@dp.message_handler(lambda m: m.from_user.id not in orders)
async def get_name(message: types.Message):
    user_id = message.from_user.id
    orders[user_id] = {"name": message.text, "device": None, "status": "–ù–æ–≤–∞"}
    await message.answer("üì± –Ø–∫–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É?")

@dp.message_handler(lambda m: orders.get(m.from_user.id) and not orders[m.from_user.id]["device"])
async def get_device(message: types.Message):
    user_id = message.from_user.id
    orders[user_id]["device"] = message.text
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ!\n–ù–æ–º–µ—Ä: #{user_id}\n"
                         f"–ö–ª—ñ—î–Ω—Ç: {orders[user_id]['name']}\n"
                         f"–ü—Ä–∏—Å—Ç—Ä—ñ–π: {orders[user_id]['device']}\n\n"
                         "–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É.")

@dp.message_handler(commands=["update"])
async def update_status(message: types.Message):
    try:
        args = message.text.split(" ", 2)
        user_id = int(args[1])
        new_status = args[2]

        if user_id in orders:
            orders[user_id]["status"] = new_status
            await bot.send_message(user_id, f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_status}")
            await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /update user_id –ù–æ–≤–∏–π_—Å—Ç–∞—Ç—É—Å")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
