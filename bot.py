import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from fastapi import FastAPI, Request
import uvicorn
import gspread
from google.oauth2.service_account import Credentials

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
API_TOKEN = os.getenv("API_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")  # –∫–ª—é—á —è–∫ JSON-—Ä—è–¥–æ–∫

if not API_TOKEN or not SPREADSHEET_ID or not GOOGLE_CREDENTIALS_JSON:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ API_TOKEN –∞–±–æ SPREADSHEET_ID –∞–±–æ GOOGLE_CREDENTIALS_JSON")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
app = FastAPI()

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets ---
# –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON-—Ä—è–¥–æ–∫ —É dict
import json
service_account_info = json.loads(GOOGLE_CREDENTIALS_JSON)
credentials = Credentials.from_service_account_info(
    service_account_info,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(SPREADSHEET_ID)
orders_ws = sheet.worksheet("–ó–∞—è–≤–∫–∏")

# –ü–∞–º‚Äô—è—Ç—å —É –ø–∞–º'—è—Ç—ñ Python
orders = {}

# –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø—Ä–∏—Å—Ç—Ä–æ—é
device_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω")],
        [KeyboardButton(text="üíª –ù–æ—É—Ç–±—É–∫")],
        [KeyboardButton(text="üîß –Ü–Ω—à–µ")]
    ],
    resize_keyboard=True
)

def add_order_to_sheet(user_id, name, device, status):
    """–î–æ–¥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ"""
    # —à—É–∫–∞—î–º–æ user_id —É –ø–µ—Ä—à—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ
    cell = orders_ws.find(str(user_id))
    if cell:
        # –æ–Ω–æ–≤–ª—é—î–º–æ —Ä—è–¥–æ–∫
        row = cell.row
        orders_ws.update(f"B{row}:D{row}", [[name, device, status]])
    else:
        # –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
        orders_ws.append_row([user_id, name, device, status])

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ –±–æ—Ç–∞ ---

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id not in orders:
        await message.answer(
            "üëã –í—ñ—Ç–∞—î–º–æ —É —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ!\n"
            "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É."
        )
    else:
        await message.answer(
            "‚úÖ –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞—è–≤–∫–∞.\n–û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É."
        )

@dp.message(lambda m: m.from_user.id not in orders)
async def get_name(message: types.Message):
    user_id = message.from_user.id
    orders[user_id] = {"name": message.text, "device": None, "status": "–ù–æ–≤–∞"}
    await message.answer("üì± –Ø–∫–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É?", reply_markup=device_keyboard)

@dp.message(lambda m: orders.get(m.from_user.id) and not orders[m.from_user.id]["device"])
async def get_device(message: types.Message):
    user_id = message.from_user.id
    orders[user_id]["device"] = message.text
    orders[user_id]["status"] = "–ù–æ–≤–∞"
    # –ø–∏—à–µ–º–æ –≤ Sheets
    add_order_to_sheet(user_id, orders[user_id]['name'], orders[user_id]['device'], orders[user_id]['status'])
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ!\n"
        f"–ù–æ–º–µ—Ä: #{user_id}\n"
        f"–ö–ª—ñ—î–Ω—Ç: {orders[user_id]['name']}\n"
        f"–ü—Ä–∏—Å—Ç—Ä—ñ–π: {orders[user_id]['device']}\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Command("update"))
async def update_status(message: types.Message):
    try:
        args = message.text.split(" ", 2)
        if len(args) < 3:
            await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /update user_id –ù–æ–≤–∏–π_—Å—Ç–∞—Ç—É—Å")
            return

        user_id = int(args[1])
        new_status = args[2]

        if user_id in orders:
            orders[user_id]["status"] = new_status
            add_order_to_sheet(user_id, orders[user_id]['name'], orders[user_id]['device'], new_status)
            await bot.send_message(user_id, f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_status}")
            await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É /update: {e}")
        await message.answer("‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–º–∞–Ω–¥—É.")

# --- –ï–Ω–¥–ø–æ—ñ–Ω—Ç FastAPI (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ---
@app.post("/send_status")
async def send_status(request: Request):
    data = await request.json()
    uid = int(data["user_id"])
    status = data["status"]
    if uid not in orders:
        orders[uid] = {"name": "–ù–µ–≤—ñ–¥–æ–º–æ", "device": "?", "status": status}
    orders[uid]["status"] = status
    add_order_to_sheet(uid, orders[uid]['name'], orders[uid]['device'], status)
    await bot.send_message(uid, f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: {status}")
    return {"ok": True}

# --- –ó–∞–ø—É—Å–∫ ---
async def run_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(run_bot())
    uvicorn.run(app, host="0.0.0.0", port=8000)
