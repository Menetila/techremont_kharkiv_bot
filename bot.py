import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# üîë –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
API_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –∑–∞—è–≤–æ–∫: {user_id: {"name": ..., "device": ..., "status": ...}}
orders = {}


# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in orders:
        await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ!\n"
                             "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É.")
    else:
        await message.answer("‚úÖ –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞—è–≤–∫–∞.\n"
                             "–û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É.")


# üìù –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º‚Äô—è
@dp.message(lambda m: m.from_user.id not in orders)
async def get_name(message: types.Message):
    user_id = message.from_user.id
    orders[user_id] = {"name": message.text, "device": None, "status": "–ù–æ–≤–∞"}
    await message.answer("üì± –Ø–∫–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É?")


# üîß –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π
@dp.message(lambda m: orders.get(m.from_user.id) and not orders[m.from_user.id]["device"])
async def get_device(message: types.Message):
    user_id = message.from_user.id
    orders[user_id]["device"] = message.text

    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ!\n"
        f"–ù–æ–º–µ—Ä: #{user_id}\n"
        f"–ö–ª—ñ—î–Ω—Ç: {orders[user_id]['name']}\n"
        f"–ü—Ä–∏—Å—Ç—Ä—ñ–π: {orders[user_id]['device']}\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É."
    )


# üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É (–∞–¥–º—ñ–Ω)
@dp.message(Command("update"))
async def update_status(message: types.Message):
    try:
        args = message.text.split(" ", 2)
        if len(args) < 3:
            await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /update user_id –ù–æ–≤–∏–π_—Å—Ç–∞—Ç—É—Å")
            return

        user_id = int(args[1])
        new_status = args[2]

        if user_id in orders:
            orders[user_id]["status"] = new_status
            await bot.send_message(user_id, f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_status}")
            await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É /update: {e}")
        await message.answer("‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–º–∞–Ω–¥—É.")


# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
